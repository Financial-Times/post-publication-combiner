swagger: "2.0"

info:
  title: Post Publication Combiner
  description: >
    This service builds combined messages (content + annotations) based on events received from PostConceptAnnotations or PostPublicationEvents.    
    The combined message is then sent to the CombinedPostPublicationEvents kafka queue.
  version: 0.0.1
  license:
    name: MIT
  contact:
    name: Universal Publishing
    email: universal.publishing@ft.com

host: api.ft.com
basePath: "/"
schemes:
  - http
  - https

definitions:
  healthcheck_check:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      ok:
        type: boolean
      severity:
        type: integer
      businessImpact:
        type: string
      technicalSummary:
        type: string
      panicGuide:
        type: string
      checkOutput:
        type: string
      lastUpdated:
        type: string
  healthcheck:
    type: object
    properties:
      schemaVersion:
        type: integer
      systemCode:
        type: string
      name:
        type: string
      description":
        type: string
      checks:
        type: array
        items:
          $ref: '#/definitions/healthcheck_check'
      ok:
        type: boolean
        enum: [true] # to enforce error if false
      severity:
        type: integer
    required:
      - ok

paths:
  /{uuid}:
    post:
      summary: Force endpoint
      description: >
        Creates and forwards a CombinedPostPublicationEvent to the queue for the provided UUID.
        Request body should be empty. 
        The combiner reads the content with that UUID from document-store, and based on its content type, it complements the message with the corresponding annotations.
        If the force request has the `X-Request-Id` header set, that value will be propagated to the queue - as a message header.
      parameters:
        - name: uuid
          in: path
          description: UUID for the content that the publish wants to be enforced
          required: true
          type: string
          x-example: a224c5d3-0f1c-49bd-b70c-c88f5d29cf60
      responses:
        200:
          description: if the message was published successfully
        400:
          description: for wrong formatted UUID
        404:
          description: for missing content and metadata for the provided uuid
        422:
          description: for a uuid with invalid content type
        500:
          description: for unexpected processing errors

  /__health:
    get:
      summary: Healthcheck
      description: Runs application healthchecks and returns FT Healthcheck style json.
      produces:
        - application/json
      responses:
        200:
          description: >
            Should always return 200 along with the output of the healthchecks - regardless
            of whether the healthchecks failed or not.
            Please inspect the overall ok property to see whether or not the application is healthy.
          schema:
            $ref: '#/definitions/healthcheck'

  /__gtg:
    get:
      summary: Good To Go
      description: Lightly healthchecks the application, and returns a 200 if it's Good-To-Go.
      produces:
          - text/plain; charset=US-ASCII
      responses:
        200:
          description: The application is healthy enough to perform all its functions correctly - i.e. good to go.
          examples:
               text/plain; charset=US-ASCII: OK
        503:
          description: >
            One or more of the application's healthchecks have failed,
            so please do not use the app. See the /__health endpoint for more detailed information.

  /__build-info:
    get:
      summary: Build Information
      description: >
        Returns application build info, such as the git repository and revision,
        the golang version it was built with, and the app release version.
      produces:
        - application/json; charset=UTF-8
      tags:
        - Info
      responses:
        200:
          description: Outputs build information as described in the summary.
          examples:
            application/json; charset=UTF-8:
              version: 0.0.1
              repository: https://github.com/Financial-Times/app-name.git
              revision: 7cdbdb18b4a518eef3ebb1b545fc124612f9d7cd
              builder: go version go1.6.3 linux/amd64
              dateTime: "20161123122615"
